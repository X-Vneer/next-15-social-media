// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id
  username     String    @unique
  displayName  String
  email        String?   @unique // optional cuz google OAuth dose not provide email
  passwordHash String? // optional: user could singin using google OAuth
  googleId     String?   @unique // optional: if user uses google OAuth
  avatarUrl    String?
  bio          String?
  sessions     Session[]
  posts        Post[]
  following    Follow[]  @relation("following")
  followers    Follow[]  @relation("followers")
  likes        Like[]
  createdAt    DateTime  @default(now())

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Post {
  id          String  @id @default(cuid())
  content     String
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments Media[]
  likes       Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@map("posts")
}

model Follow {
  followerId  String
  follower    User   @relation("following", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User   @relation("followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Media {
  id       String    @id @default(cuid())
  postId   String?
  post     Post?     @relation(fields: [postId], references: [id], onDelete: SetNull)
  type     MediaType
  url      String
  createAt DateTime  @default(now())

  @@map("post_media")
}

enum MediaType {
  IMAGE
  VIDEO
}

model Like {
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId  String
  post    Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  likedAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("likes")
}
